  const createInitiatingPeer = ({
    whoJoinedId,
    whoJoinedSockId,
    stream,
    myUserId,
  }: {
    myUserId: string;
    whoJoinedId: string;
    whoJoinedSockId: string | null;
    stream: MediaStream | null;
  }) => {
    if (!socket) return;
    if (peerMap.current.has(whoJoinedId)) {
      debug("destroying peer 2", 1);
      destroyPeerFromMap(whoJoinedId, "init peer destroy intentional");
    }
    socket.emit("create-receive-peer", {
      toWhomId: whoJoinedId,
      toWhomSockId: whoJoinedSockId,
      roomId,
    });
    debug("emited receive peer event ", 2);

    const peer = createPeer(true, stream); // create a new initiator peer
    debug("created init peer ", 3);

    peerMap.current.set(whoJoinedId, {
      used: false,
      peer,
      remoteStream: null,
    });

    if (peer) {
      peer.on("connect", () => {
        console.log("new friend joined");
      });
      peer.on("track", (track, stream) => {
        console.log("hello track");
      });
      peer.on("signal", (data) => {
        socket.emit("send-signal-to-friend", {
          toWhomSockId: whoJoinedSockId, // can be null
          toWhomId: whoJoinedId,
          signal: data,
          roomId,
        });
      });

      peer.on("stream", (remoteStream) => {
        debug(` received stream from ${whoJoinedId} `, 6);

        // const obj = peerMap.current.get(whoJoinedId) || {
        //   used: false,
        //   peer: null,
        //   stream: null,
        // };

        // peerMap.current.set(whoJoinedId, { ...obj, remoteStream });
        if (userDataRef.current.get(whoJoinedId)) {
          console.info("I have added src to video el");
          userDataRef.current.get(whoJoinedId)!.srcObject = remoteStream;
        }

        // setPeerMap((prev) => {
        //   debug(` saving new stream from  ${whoJoinedId} `, 7);

        //   const obj = prev.get(whoJoinedId) || {
        //     used: false,
        //     peer: null,
        //     stream: null,
        //   };
        //   prev.set(whoJoinedId, { ...obj, stream: remoteStream });
        //   return new Map(prev);
        // });
      });
      peer.on("close", () => {
        // (peer, from);
      });
      peer.on("error", (error) => {
        console.error(error);

        destroyPeerFromMap(whoJoinedId, "now destroying init on event error");
      });

      // optimized
      // setTrack((prev) => prev + 1);
    } else {
      console.error("why no peer");
    }
  };
  const createReceivingPeer = ({
    fromWhomId,
    fromWhomSockId,
    stream,
  }: {
    fromWhomId: string;
    fromWhomSockId: string;
    stream: MediaStream | null;
  }) => {
    if (!socket) return;

    if (peerMap.current.has(fromWhomId)) {
      debug(` destroy receive peer on receive  ${fromWhomId} `, 9);
      destroyPeerFromMap(fromWhomId, "receive peer destroy intentional");
    }
    // test if things are working now
    const peer = createPeer(false, stream);
    debug(` created receive peer  ${fromWhomId} `, 10);

    if (peer) {
      peerMap.current.set(fromWhomId, {
        used: false,
        peer,
        remoteStream: null,
      });
      peer.on("signal", (data) => {
        // socket.emit("complete-connection", {
        //   signal: data,
        //   toWhomId: fromWhomId,
        //   toWhomSockId: fromWhomSockId,
        // });
        socket.emit("send-signal-to-friend", {
          toWhomSockId: fromWhomId, // can be null
          toWhomId: fromWhomSockId,
          signal: data,
          roomId,
        });
      });

      peer.on("stream", (remoteStream) => {
        debug(` received stream from host  ${fromWhomId} `, 11);

        // const obj = peerMap.current.get(fromWhomId) || {
        //   used: false,
        //   peer: null,
        //   stream: null,
        // };
        // peerMap.current.set(fromWhomId, { ...obj, remoteStream });

        if (userDataRef.current.get(fromWhomId)) {
          const el = userDataRef.current.get(fromWhomId);
          if (el) {
            el.srcObject = remoteStream;
            console.log({ el, remoteStream });
            el.onloadeddata = (event) => {
              console.log(event, "loaded meta data");
              el.play();
            };
          } else {
            console.log(userDataRef.current, "what now");
          }
        } else {
          console.log("no element");
        }
      });
      peer.on("track", (track, stream) => {
        console.log("hello there 2");
      });

      peer.on("close", () => {
        // destroyPeer(peer, from);
        console.log("peer closed");
      });
      peer.on("error", (error) => {
        console.error(error);

        destroyPeerFromMap(fromWhomId, "now destroying receive on event error");
      });
    }
  };